services:
  db:
    image: postgres:17.6
    environment:
      # See https://hub.docker.com/_/postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-senzing}
      POSTGRES_USER: ${POSTGRES_USERNAME:-senzing}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-senzing}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data

  init-db:
    image: senzing/init-database:latest
    depends_on:
      - db
    environment:
      SENZING_TOOLS_DATASOURCES: PEOPLE
      SENZING_TOOLS_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-senzing}:${POSTGRES_PASSWORD:-senzing}@db:5432:${POSTGRES_DB:-G2}/?sslmode=disable"
          }
        }
    read_only: true
    restart: on-failure

  localstack:
    image: localstack/localstack:4.7.0
    ports:
      - "4566:4566"
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
      - SERVICES=s3,sqs
    volumes:
      - localstack:/var/lib/localstack
      - ./docker/localstack-setup.sh:/etc/localstack/init/ready.d/script.sh

  tools:
    build:
      context: .
      dockerfile: Dockerfile.tools
    depends_on:
      - db
    environment:
      AWS_ENDPOINT_URL: http://localstack:4566
      PGHOST: db
      PGUSER: ${POSTGRES_USERNAME:-senzing}
      PGPASSWORD: ${POSTGRES_PASSWORD:-senzing}
      SENZING_DATASOURCES: PEOPLE CUSTOMERS
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-senzing}:${POSTGRES_PASSWORD:-senzing}@db:5432:${POSTGRES_DB:-G2}/?sslmode=disable"
          }
        }
      AWS_PROFILE: localstack
      S3_BUCKET_NAME: sqs-senzing-local-export
      PYTHONPATH: ${PYTHONPATH}:/opt/senzing/er/sdk/python:/home/senzing/dev:/usr/lib/python3/dist-packages
      PYTHONUNBUFFERED: 1 # Flush buffer - helps with print statements.
    volumes:
      - ~/tmp:/tmp
      - ~/.aws:/home/senzing/.aws

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - db
    environment:
      AWS_ENDPOINT_URL: http://localstack:4566
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-senzing}:${POSTGRES_PASSWORD:-senzing}@db:5432:${POSTGRES_DB:-G2}/?sslmode=disable"
          }
        }
      Q_URL: http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/sqs-senzing-local-ingest
    volumes:
      # Note: `.aws` mount might not be needed later.
      - ~/.aws:/home/senzing/.aws

  redoer:
    build:
      context: .
      dockerfile: Dockerfile.redoer
    depends_on:
      - db
    environment:
      AWS_ENDPOINT_URL: http://localstack:4566
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-senzing}:${POSTGRES_PASSWORD:-senzing}@db:5432:${POSTGRES_DB:-G2}/?sslmode=disable"
          }
        }
    volumes:
      - ~/.aws:/home/senzing/.aws

  exporter:
    build:
      context: .
      dockerfile: Dockerfile.exporter
    depends_on:
      - db
    environment:
      AWS_ENDPOINT_URL: http://localstack:4566
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-senzing}:${POSTGRES_PASSWORD:-senzing}@db:5432:${POSTGRES_DB:-G2}/?sslmode=disable"
          }
        }
    volumes:
      - ~/.aws:/home/senzing/.aws
      - ~/tmp:/tmp # Should you wish to write files to host.

volumes:
  localstack:
  postgres:
